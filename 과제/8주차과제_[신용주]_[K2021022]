{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"8주차과제_[신용주]_[K2021022]","provenance":[],"authorship_tag":"ABX9TyPEiLvFzweneiERSE2Te1yU"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JYE_iVrzyJ5G","executionInfo":{"status":"ok","timestamp":1636033812242,"user_tz":-540,"elapsed":17626,"user":{"displayName":"신용주","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16946698484436880552"}},"outputId":"bc2dd034-b68e-4168-a231-fd6d95c9ee98"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","metadata":{"id":"MyrSC5n_0jIH","executionInfo":{"status":"ok","timestamp":1636033816526,"user_tz":-540,"elapsed":1030,"user":{"displayName":"신용주","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16946698484436880552"}}},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","import seaborn as sns\n","from scipy import stats\n","%matplotlib inline"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":205},"id":"0oTOYMtl2YsG","executionInfo":{"status":"ok","timestamp":1636033819502,"user_tz":-540,"elapsed":860,"user":{"displayName":"신용주","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16946698484436880552"}},"outputId":"e27ec429-e02f-4166-b62c-4087406a0da4"},"source":["measure= pd.read_excel('/content/drive/MyDrive/기계학습기초/measure.xlsx')\n","measure.head()"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>x1</th>\n","      <th>x2</th>\n","      <th>x3</th>\n","      <th>x4</th>\n","      <th>x5</th>\n","      <th>x6</th>\n","      <th>x7</th>\n","      <th>y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>94</td>\n","      <td>80</td>\n","      <td>70</td>\n","      <td>77</td>\n","      <td>99</td>\n","      <td>85</td>\n","      <td>79</td>\n","      <td>83</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>91</td>\n","      <td>82</td>\n","      <td>76</td>\n","      <td>91</td>\n","      <td>79</td>\n","      <td>96</td>\n","      <td>93</td>\n","      <td>87</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>86</td>\n","      <td>82</td>\n","      <td>72</td>\n","      <td>92</td>\n","      <td>99</td>\n","      <td>78</td>\n","      <td>92</td>\n","      <td>86</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>88</td>\n","      <td>79</td>\n","      <td>77</td>\n","      <td>75</td>\n","      <td>80</td>\n","      <td>78</td>\n","      <td>82</td>\n","      <td>80</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>93</td>\n","      <td>82</td>\n","      <td>77</td>\n","      <td>75</td>\n","      <td>79</td>\n","      <td>76</td>\n","      <td>89</td>\n","      <td>82</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   x1  x2  x3  x4  x5  x6  x7   y\n","0  94  80  70  77  99  85  79  83\n","1  91  82  76  91  79  96  93  87\n","2  86  82  72  92  99  78  92  86\n","3  88  79  77  75  80  78  82  80\n","4  93  82  77  75  79  76  89  82"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":205},"id":"GWuUNK934nac","executionInfo":{"status":"ok","timestamp":1636033822071,"user_tz":-540,"elapsed":316,"user":{"displayName":"신용주","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16946698484436880552"}},"outputId":"f64b17f9-c2c6-4d91-9598-e86d70149fca"},"source":["measureDF=pd.DataFrame(measure)\n","measureDF['Y']=measure.y\n","measureDF.head()"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>x1</th>\n","      <th>x2</th>\n","      <th>x3</th>\n","      <th>x4</th>\n","      <th>x5</th>\n","      <th>x6</th>\n","      <th>x7</th>\n","      <th>y</th>\n","      <th>Y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>94</td>\n","      <td>80</td>\n","      <td>70</td>\n","      <td>77</td>\n","      <td>99</td>\n","      <td>85</td>\n","      <td>79</td>\n","      <td>83</td>\n","      <td>83</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>91</td>\n","      <td>82</td>\n","      <td>76</td>\n","      <td>91</td>\n","      <td>79</td>\n","      <td>96</td>\n","      <td>93</td>\n","      <td>87</td>\n","      <td>87</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>86</td>\n","      <td>82</td>\n","      <td>72</td>\n","      <td>92</td>\n","      <td>99</td>\n","      <td>78</td>\n","      <td>92</td>\n","      <td>86</td>\n","      <td>86</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>88</td>\n","      <td>79</td>\n","      <td>77</td>\n","      <td>75</td>\n","      <td>80</td>\n","      <td>78</td>\n","      <td>82</td>\n","      <td>80</td>\n","      <td>80</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>93</td>\n","      <td>82</td>\n","      <td>77</td>\n","      <td>75</td>\n","      <td>79</td>\n","      <td>76</td>\n","      <td>89</td>\n","      <td>82</td>\n","      <td>82</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   x1  x2  x3  x4  x5  x6  x7   y   Y\n","0  94  80  70  77  99  85  79  83  83\n","1  91  82  76  91  79  96  93  87  87\n","2  86  82  72  92  99  78  92  86  86\n","3  88  79  77  75  80  78  82  80  80\n","4  93  82  77  75  79  76  89  82  82"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"uWxD2F0H4ndv","executionInfo":{"status":"ok","timestamp":1636033824397,"user_tz":-540,"elapsed":3,"user":{"displayName":"신용주","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16946698484436880552"}}},"source":["y_target= measureDF['Y']\n","X_data=measureDF.drop(['Y'],axis=1, inplace=False)"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"cyzgKAb24ngV","executionInfo":{"status":"ok","timestamp":1636033976613,"user_tz":-540,"elapsed":277,"user":{"displayName":"신용주","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16946698484436880552"}}},"source":["from sklearn.linear_model import Ridge\n","from sklearn.model_selection import cross_val_score\n","\n","ridge = Ridge(alpha=10)\n","neg_mse_scores = cross_val_score(ridge, X_data, y_target, scoring=\"neg_mean_squared_error\", cv=5)\n","rmse_scores = np.sqrt(-1*neg_mse_scores)\n","avg_rmse = np.mean(rmse_scores)"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"Go3YHBmb4niv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636034095215,"user_tz":-540,"elapsed":285,"user":{"displayName":"신용주","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16946698484436880552"}},"outputId":"2b349566-049a-4e64-8bb6-3eb7cea40c3a"},"source":["print('5 folds 의 개별 Negative MSE scores : ', np.round(neg_mse_scores, 3))\n","print('5 folds 의 개별 RMSE scores : ', np.round(rmse_scores, 3))\n","print('5 folds 의 평균 RMSE scores : ', format(avg_rmse))"],"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["5 folds 의 개별 Negative MSE scores :  [-0.031 -0.037 -0.029 -0.021 -0.036]\n","5 folds 의 개별 RMSE scores :  [0.176 0.193 0.169 0.145 0.19 ]\n","5 folds 의 평균 RMSE scores :  0.1744751018688558\n"]}]},{"cell_type":"code","metadata":{"id":"Xw1LkarV4nlS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636034623543,"user_tz":-540,"elapsed":290,"user":{"displayName":"신용주","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16946698484436880552"}},"outputId":"31375fe4-a885-4d97-ba2a-ce57de83c8a5"},"source":["alphas = [0, 0.1 , 1, 10, 100]\n","\n","for alpha in alphas:\n","  ridge=Ridge(alpha = alpha)\n","\n","  neg_mse_scores = cross_val_score(ridge, X_data, y_target, scoring=\"neg_mean_squared_error\", cv=5)\n","  avg_rmse= np.mean(np.sqrt(-1*neg_mse_scores))\n","  print('alpha {0} 일 때 5 folds 의 평균 RMSE : {1:.3f}'.format(alpha, avg_rmse))"],"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["alpha 0 일 때 5 folds 의 평균 RMSE : 0.000\n","alpha 0.1 일 때 5 folds 의 평균 RMSE : 0.005\n","alpha 1 일 때 5 folds 의 평균 RMSE : 0.042\n","alpha 10 일 때 5 folds 의 평균 RMSE : 0.174\n","alpha 100 일 때 5 folds 의 평균 RMSE : 0.260\n"]}]},{"cell_type":"code","metadata":{"id":"SvfADHO84nnd","colab":{"base_uri":"https://localhost:8080/","height":248},"executionInfo":{"status":"ok","timestamp":1636037799034,"user_tz":-540,"elapsed":1027,"user":{"displayName":"신용주","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16946698484436880552"}},"outputId":"817f248c-8022-4bb4-cb81-c94e06596c0c"},"source":["fig, axs = plt.subplots(figsize=(18,6), ncols=5)\n","coeff_df=pd.DataFrame()\n","for pos, alpha in enumerate(alphas):\n","  ridge = Ridge(alpha=alpha)\n","  ridge.fit(X_data,y_target)\n","  coeff=pd.Series(data=ridge.coef_,index=X_data.columns )\n","  colname='alpha:'+str(alpha)\n","  coeff_df[colname]= coeff\n","  coeff=coeff.sort_values(ascending=False)\n","  axs[pos].set_title(colname)\n","  axs[pos].set_xlim(-3, 6)\n","  sns.barplot(x=coeff.values, y=coeff.index, ax=axs[pos])\n","\n","plt.show()"],"execution_count":11,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1296x432 with 5 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":299},"id":"ATxNUBaMbqcr","executionInfo":{"status":"ok","timestamp":1636037901044,"user_tz":-540,"elapsed":445,"user":{"displayName":"신용주","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16946698484436880552"}},"outputId":"653ab4bf-a7a1-4574-9c2b-cc8a71949e1c"},"source":["ridge_alphas=[0,0.1,1,10,100]\n","sort_column='alpha:'+str(ridge_alphas[0])\n","coeff_df.sort_values(by=sort_column, ascending=False)"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>alpha:0</th>\n","      <th>alpha:0.1</th>\n","      <th>alpha:1</th>\n","      <th>alpha:10</th>\n","      <th>alpha:100</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>y</th>\n","      <td>1.000000e+00</td>\n","      <td>0.987355</td>\n","      <td>0.888102</td>\n","      <td>0.479601</td>\n","      <td>0.177285</td>\n","    </tr>\n","    <tr>\n","      <th>x6</th>\n","      <td>8.317785e-16</td>\n","      <td>0.001712</td>\n","      <td>0.015153</td>\n","      <td>0.070659</td>\n","      <td>0.114038</td>\n","    </tr>\n","    <tr>\n","      <th>x7</th>\n","      <td>7.439748e-16</td>\n","      <td>0.001885</td>\n","      <td>0.016687</td>\n","      <td>0.077714</td>\n","      <td>0.124029</td>\n","    </tr>\n","    <tr>\n","      <th>x1</th>\n","      <td>1.092025e-16</td>\n","      <td>0.001755</td>\n","      <td>0.015530</td>\n","      <td>0.072146</td>\n","      <td>0.112788</td>\n","    </tr>\n","    <tr>\n","      <th>x5</th>\n","      <td>7.122967e-17</td>\n","      <td>0.001871</td>\n","      <td>0.016551</td>\n","      <td>0.076828</td>\n","      <td>0.119318</td>\n","    </tr>\n","    <tr>\n","      <th>x4</th>\n","      <td>-1.627240e-16</td>\n","      <td>0.001767</td>\n","      <td>0.015637</td>\n","      <td>0.072731</td>\n","      <td>0.115121</td>\n","    </tr>\n","    <tr>\n","      <th>x2</th>\n","      <td>-5.371680e-16</td>\n","      <td>0.001781</td>\n","      <td>0.015730</td>\n","      <td>0.071916</td>\n","      <td>0.097325</td>\n","    </tr>\n","    <tr>\n","      <th>x3</th>\n","      <td>-7.321928e-16</td>\n","      <td>0.001864</td>\n","      <td>0.016477</td>\n","      <td>0.075822</td>\n","      <td>0.109404</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         alpha:0  alpha:0.1   alpha:1  alpha:10  alpha:100\n","y   1.000000e+00   0.987355  0.888102  0.479601   0.177285\n","x6  8.317785e-16   0.001712  0.015153  0.070659   0.114038\n","x7  7.439748e-16   0.001885  0.016687  0.077714   0.124029\n","x1  1.092025e-16   0.001755  0.015530  0.072146   0.112788\n","x5  7.122967e-17   0.001871  0.016551  0.076828   0.119318\n","x4 -1.627240e-16   0.001767  0.015637  0.072731   0.115121\n","x2 -5.371680e-16   0.001781  0.015730  0.071916   0.097325\n","x3 -7.321928e-16   0.001864  0.016477  0.075822   0.109404"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"yNhkSH4bbqki","executionInfo":{"status":"ok","timestamp":1636037945879,"user_tz":-540,"elapsed":285,"user":{"displayName":"신용주","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16946698484436880552"}}},"source":["from sklearn.linear_model import Lasso, ElasticNet"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"id":"25cu_Hbgbqry","executionInfo":{"status":"ok","timestamp":1636039494545,"user_tz":-540,"elapsed":370,"user":{"displayName":"신용주","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16946698484436880552"}}},"source":["def get_linear_reg_eval(model_name, params=None, X_data_n=None,y_target_n=None,\n","                        verbose=True,return_coeff=True):\n","    coeff_df=pd.DataFrame()\n","    if verbose : print('#######', model_name, '#######')\n","    for param in params:\n","      if model_name == 'Ridge' : model = Ridge(alpha=param)\n","      elif model_name == 'Lasso': model = Lasso(alpha=param)\n","      elif model_name == 'ElasticNet': model = ElasticNet(alpha=params, l1_ratio=0.7)\n","      neg_mse_scores = cross_val_score(model, X_data_n,\n","                                       y_target_n, scoring=\"neg_mean_squared_error\", cv=5)\n","      avg_rmse = np.mean(np.sqrt(-1*neg_mse_scores))\n","      print('alpha {0}일 때 5 폴드 세트의 평균 RMSE: {1:.3f}'.format(param, avg_rmse))\n","\n","      model.fit(X_data_n , y_target_n)\n","      if return_coeff:\n","        coeff = pd.Series(data=model.coef_ , index=X_data_n.columns)\n","        colname='alpha:'+str(param)\n","        coeff_df[colname]= coeff\n","    return coeff_df"],"execution_count":42,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K8wM7gNHbqys","executionInfo":{"status":"ok","timestamp":1636039546610,"user_tz":-540,"elapsed":279,"user":{"displayName":"신용주","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16946698484436880552"}},"outputId":"23e76031-9087-46cd-8cac-8f81e734d0fa"},"source":["lasso_alphas =[0.07,0.1,0.5,1.3]\n","coeff_lasso_df= get_linear_reg_eval('Lasso', params=lasso_alphas, X_data_n=X_data, y_target_n=y_target)"],"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["####### Lasso #######\n","alpha 0.07일 때 5 폴드 세트의 평균 RMSE: 0.038\n","alpha 0.1일 때 5 폴드 세트의 평균 RMSE: 0.053\n","alpha 0.5일 때 5 폴드 세트의 평균 RMSE: 0.255\n","alpha 1.3일 때 5 폴드 세트의 평균 RMSE: 0.626\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":299},"id":"JslbgvOQjoPj","executionInfo":{"status":"ok","timestamp":1636039616799,"user_tz":-540,"elapsed":327,"user":{"displayName":"신용주","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16946698484436880552"}},"outputId":"6ce7318b-a1cb-47cf-cb58-b4963cf44931"},"source":["sort_column = 'alpha:'+str(lasso_alphas[0])\n","coeff_lasso_df.sort_values(by=sort_column, ascending=False)"],"execution_count":45,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>alpha:0.07</th>\n","      <th>alpha:0.1</th>\n","      <th>alpha:0.5</th>\n","      <th>alpha:1.3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>y</th>\n","      <td>0.938665</td>\n","      <td>0.915065</td>\n","      <td>0.600434</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>x7</th>\n","      <td>0.010049</td>\n","      <td>0.013894</td>\n","      <td>0.065153</td>\n","      <td>0.162976</td>\n","    </tr>\n","    <tr>\n","      <th>x6</th>\n","      <td>0.010021</td>\n","      <td>0.013926</td>\n","      <td>0.065985</td>\n","      <td>0.166096</td>\n","    </tr>\n","    <tr>\n","      <th>x4</th>\n","      <td>0.008618</td>\n","      <td>0.011940</td>\n","      <td>0.056220</td>\n","      <td>0.140763</td>\n","    </tr>\n","    <tr>\n","      <th>x5</th>\n","      <td>0.007744</td>\n","      <td>0.010670</td>\n","      <td>0.049686</td>\n","      <td>0.123573</td>\n","    </tr>\n","    <tr>\n","      <th>x1</th>\n","      <td>0.007663</td>\n","      <td>0.010583</td>\n","      <td>0.049506</td>\n","      <td>0.123412</td>\n","    </tr>\n","    <tr>\n","      <th>x3</th>\n","      <td>0.001508</td>\n","      <td>0.001851</td>\n","      <td>0.006419</td>\n","      <td>0.011890</td>\n","    </tr>\n","    <tr>\n","      <th>x2</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    alpha:0.07  alpha:0.1  alpha:0.5  alpha:1.3\n","y     0.938665   0.915065   0.600434   0.000000\n","x7    0.010049   0.013894   0.065153   0.162976\n","x6    0.010021   0.013926   0.065985   0.166096\n","x4    0.008618   0.011940   0.056220   0.140763\n","x5    0.007744   0.010670   0.049686   0.123573\n","x1    0.007663   0.010583   0.049506   0.123412\n","x3    0.001508   0.001851   0.006419   0.011890\n","x2    0.000000   0.000000   0.000000   0.000000"]},"metadata":{},"execution_count":45}]},{"cell_type":"markdown","metadata":{"id":"vw0cwqYWkH3M"},"source":["Ridge 회귀식 선택 \n","\n","RIdge 회귀식의 평균 RMSE값이 전체적인 알파값에서 모두 앞선다"]}]}